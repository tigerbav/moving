#include <iostream>
#include <conio.h>
#include <ctime>
#include <cstdlib>
#include <windows.h>
using namespace std;
const int N = 22;

void display();
char person(int&, int&);
void keyboard(char, int&, int&, int&, int&);
char box(int&, int&);

char pole[N][N] = { { '/', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '\\' },
{ '|', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '|', },
{ '|', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '|', },
{ '|', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '|', },
{ '|', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '|', },
{ '|', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '|', },
{ '|', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '|', },
{ '|', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '|', },
{ '|', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '|', },
{ '|', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '|', },
{ '|', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '|', },
{ '|', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '|', },
{ '|', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '|', },
{ '|', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '|', },
{ '|', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '|', },
{ '|', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '|', },
{ '|', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '|', },
{ '|', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '|', },
{ '|', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '|', },
{ '|', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '|', },
{ '|', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '|', },
{ '\\', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '/' } };
const char P = '@';
const char YA = 'o';
const char END = 'X';

int main()
{
	SetConsoleOutputCP(1251);
	SetConsoleCP(1251);
	srand(time(NULL));
	int x = rand() % (N - 2) + 1, //координаты персонажа
		y = rand() % (N - 2) + 1,
		x1 = rand() % (N - 4) + 2,//координаты блока
		y1 = rand() % (N - 4) + 2,
		px = rand() % (N - 2) + 1,//координаты конечной точки
		py = rand() % (N - 2) + 1;
	char a;
	do
	{
		pole[px][py] = END;
		person(x, y);
		box(x1, y1);
		display();
		a = _getche();
		system("cls");
		keyboard(a, x, y, x1, y1);
		if (pole[px][py] == pole[x1][y1])
		{
			system("cls");
			cout << "YOU WIN!!!";
			_getch();
			break;
		}
	} while (a != '\r');
	return 0;
}
void display() // вывод поля на экран
{
	for (int i = 0; i < N; i++)
	{
		for (int j = 0; j < N; j++)
		{
			cout << pole[i][j];
		}
		cout << endl;
	}
}
char person(int& x, int& y) // координаты персонажа в действии
{
	pole[x][y] = P;
	return pole[x][y];
}
char box(int& x1, int& y1) // координаты блока в действии
{
	pole[x1][y1] = YA;
	return pole[x1][y1];
}
void keyboard(char a, int& x, int& y, int& x1, int& y1)
{
	int b, d; //для проверки следующего шага
	if (a == 'w' || a == 'ц')
	{
		b = x - 1;
		d = x1 - 1;
		if (pole[b][y] != '-') // если след. шаг не край
		{
			if (pole[b][y] == YA && pole[d][y1] != '-')  // если след. шаг совпадает
				// с координатой блока И 
				// след. шаг блока не равен краю
			{
				--x1;		    //двигаем блок
				pole[x][y] = ' ';   //"заметаем следы"
				--x;		    //новая координата персонажа
			}
			else if (pole[b][y] == YA && pole[d][y1] == '-'){}   // если след. шаг совпадает
			// с координатой блока И 
			// след. шаг блока равен краю
			// мы ничего не делаем
			else
			{
				pole[x][y] = ' ';	//"заметаем следы"
				--x;		        //новая координата персонажа
			}
		}
	}
	//далее в этой функции все аналогично
	else if (a == 'a' || a == 'ф')
	{
		b = y - 1;
		d = y1 - 1;
		if (pole[x][b] != '|')
		{
			if (pole[x][b] == YA && pole[x1][d] != '|')
			{
				--y1;
				pole[x][y] = ' ';
				--y;
			}
			else if (pole[x][b] == YA && pole[x1][d] == '|'){}
			else
			{
				pole[x][y] = ' ';
				--y;
			}
		}
	}
	else if (a == 'd' || a == 'в')
	{
		b = y + 1;
		d = y1 + 1;
		if (pole[x][b] != '|')
		{
			if (pole[x][b] == YA && pole[x1][d] != '|')
			{
				++y1;
				pole[x][y] = ' ';
				++y;
			}
			else if (pole[x][b] == YA && pole[x1][d] == '|'){}
			else
			{
				pole[x][y] = ' ';
				++y;
			}
		}
	}
	else if (a == 's' || a == 'і' || a == 'ы')
	{
		b = x + 1;
		d = x1 + 1;
		if (pole[b][y] != '-')
		{
			if (pole[b][y] == YA && pole[d][y1] != '-')
			{
				++x1;
				pole[x][y] = ' ';
				++x;
			}
			else if (pole[b][y] == YA && pole[d][y1] == '-'){}
			else
			{
				pole[x][y] = ' ';
				++x;
			}
		}
	}
}